
#
# MIT License
#
# (C) Copyright 2021-2022, 2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rrs-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rrs-api
  template:
    metadata:
      labels:
        app: rrs-api
    spec:
      serviceAccountName: rrs-reader
      containers:
      - name: rrs-api
        image: library/infofetch:1.0.5
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: k8s-api-access
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
      volumes:
      - name: k8s-api-access
        projected:
          sources:
          - serviceAccountToken:
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
              - key: ca.crt
                path: ca.crt

---
apiVersion: v1
kind: Service
metadata:
  name: rrs-api
spec:
  selector:
    app: rrs-api
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      # nodePort: 30090
  type: ClusterIP